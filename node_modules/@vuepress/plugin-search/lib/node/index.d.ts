import { Page, Plugin, App } from 'vuepress/core';
import { KeyOptions } from '@vuepress/helper';
import { PageHeader, LocaleConfig } from 'vuepress/shared';

interface SearchPluginLocaleData {
    /**
     * The placeholder of the search box
     */
    placeholder: string;
}

interface SearchIndexItem {
    title: string;
    path: string;
    pathLocale: string;
    extraFields: string[];
    headers: PageHeader[];
}
type SearchIndex = SearchIndexItem[];

/**
 * Options for @vuepress/plugin-search
 */
interface SearchPluginOptions {
    /**
     * Locales config for search box
     */
    locales?: LocaleConfig<SearchPluginLocaleData>;
    /**
     * Specify the [event.key](http://keycode.info/) of the hotkeys
     *
     * When hotkeys are pressed, the search box input will be focused
     *
     * Set to an empty array to disable hotkeys
     *
     * @default ['s', '/']
     */
    hotKeys?: (KeyOptions | string)[];
    /**
     * Specify the maximum number of search results
     *
     * @default 5
     */
    maxSuggestions?: number;
    /**
     * A function to determine whether a page should be included in the search index
     */
    isSearchable?: (page: Page) => boolean;
    /**
     * A function to add extra fields to the search index of a page
     */
    getExtraFields?: (page: Page) => string[];
}
declare const searchPlugin: ({ locales, hotKeys, maxSuggestions, isSearchable, getExtraFields, }?: SearchPluginOptions) => Plugin;

declare const prepareSearchIndex: ({ app, isSearchable, getExtraFields, }: {
    app: App;
    isSearchable: Required<SearchPluginOptions>["isSearchable"];
    getExtraFields: Required<SearchPluginOptions>["getExtraFields"];
}) => Promise<string>;

export { prepareSearchIndex, searchPlugin };
export type { SearchIndex, SearchIndexItem, SearchPluginLocaleData, SearchPluginOptions };
