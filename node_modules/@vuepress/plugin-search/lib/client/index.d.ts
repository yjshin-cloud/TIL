import * as vue from 'vue';
import { PropType, Ref, ComputedRef } from 'vue';
import { ExactLocaleConfig, KeyOptions } from '@vuepress/helper/client';
import { PageHeader } from 'vuepress/shared';

interface SearchPluginLocaleData {
    /**
     * The placeholder of the search box
     */
    placeholder: string;
}

interface SearchIndexItem {
    title: string;
    path: string;
    pathLocale: string;
    extraFields: string[];
    headers: PageHeader[];
}
type SearchIndex = SearchIndexItem[];

type SearchPluginLocaleConfig = ExactLocaleConfig<SearchPluginLocaleData>;

declare const SearchBox: vue.DefineComponent<vue.ExtractPropTypes<{
    locales: {
        type: PropType<SearchPluginLocaleConfig>;
        default: () => {};
    };
    hotKeys: PropType<(KeyOptions | string)[]>;
    maxSuggestions: {
        type: NumberConstructor;
        default: number;
    };
}>, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.PublicProps, Readonly<vue.ExtractPropTypes<{
    locales: {
        type: PropType<SearchPluginLocaleConfig>;
        default: () => {};
    };
    hotKeys: PropType<(KeyOptions | string)[]>;
    maxSuggestions: {
        type: NumberConstructor;
        default: number;
    };
}>> & Readonly<{}>, {
    locales: SearchPluginLocaleConfig;
    maxSuggestions: number;
}, {}, {}, {}, string, vue.ComponentProvideOptions, true, {}, any>;

type SearchIndexRef = Ref<SearchIndex>;
declare const searchIndex: any;
declare const useSearchIndex: () => SearchIndexRef;

interface SearchSuggestion {
    link: string;
    title: string;
    header?: string;
}
declare const useSearchSuggestions: ({ searchIndex, routeLocale, query, maxSuggestions, }: {
    searchIndex: Ref<SearchIndex>;
    routeLocale: Ref<string>;
    query: Ref<string>;
    maxSuggestions: Ref<number>;
}) => ComputedRef<SearchSuggestion[]>;

declare const useSuggestionsFocus: (suggestions: Ref<unknown[]>) => {
    focusIndex: Ref<number>;
    focusNext: () => void;
    focusPrev: () => void;
};

declare const isQueryMatched: (query: string, toMatch: string[]) => boolean;

export { SearchBox, isQueryMatched, searchIndex, useSearchIndex, useSearchSuggestions, useSuggestionsFocus };
export type { SearchIndex, SearchIndexItem, SearchIndexRef, SearchPluginLocaleData, SearchSuggestion };
