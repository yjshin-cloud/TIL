import{_ as s,c as a,a as p,o as t}from"./app-D9gGdB3y.js";const e={};function l(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="java-calculator-ai-이미지-생성기-완벽-가이드" tabindex="-1"><a class="header-anchor" href="#java-calculator-ai-이미지-생성기-완벽-가이드"><span>Java Calculator &amp; AI 이미지 생성기 완벽 가이드</span></a></h1><h2 id="📋-목차" tabindex="-1"><a class="header-anchor" href="#📋-목차"><span>📋 목차</span></a></h2><ol><li><a href="#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EC%9A%94">프로젝트 개요</a></li><li><a href="#%EA%B3%84%EC%82%B0%EA%B8%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98">계산기 시스템 아키텍처</a></li><li><a href="#%ED%95%B5%EC%8B%AC-java-%EA%B0%9C%EB%85%90-%EC%84%A4%EB%AA%85">핵심 Java 개념 설명</a></li><li><a href="#%EA%B3%84%EC%82%B0%EA%B8%B0-%EA%B5%AC%ED%98%84-%EC%BD%94%EB%93%9C">계산기 구현 코드</a></li><li><a href="#ai-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1%EA%B8%B0">AI 이미지 생성기</a></li><li><a href="#stream-api-%ED%99%9C%EC%9A%A9">Stream API 활용</a></li><li><a href="#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C">참고자료</a></li></ol><hr><h2 id="프로젝트-개요" tabindex="-1"><a class="header-anchor" href="#프로젝트-개요"><span>프로젝트 개요</span></a></h2><p>이 프로젝트는 <strong>Java 객체지향 프로그래밍</strong>을 배우기 위한 실습으로, 두 가지 주요 기능을 구현합니다:</p><ol><li><strong>계산기</strong>: 다양한 자료구조로 계산 이력을 저장하는 계산기</li><li><strong>AI 이미지 생성기</strong>: Google Gemini API를 사용한 이미지 자동 생성 도구</li></ol><h3 id="학습-목표" tabindex="-1"><a class="header-anchor" href="#학습-목표"><span>학습 목표</span></a></h3><ul><li>인터페이스와 추상클래스 활용</li><li>다형성(Polymorphism) 이해</li><li>자료구조(Array, List, Map) 비교</li><li>HTTP API 통신</li><li>Stream API 함수형 프로그래밍</li></ul><hr><h2 id="계산기-시스템-아키텍처" tabindex="-1"><a class="header-anchor" href="#계산기-시스템-아키텍처"><span>계산기 시스템 아키텍처</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">classDiagram</span></span>
<span class="line">    <span class="token keyword">class</span> ICalculator <span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation important">&lt;&lt;interface&gt;&gt;</span></span>
<span class="line">        +calculate<span class="token text string">(int, int, String)</span> int</span>
<span class="line">        +calculate<span class="token text string">(double, double, String)</span> double</span>
<span class="line">        +showHistory<span class="token punctuation">(</span><span class="token punctuation">)</span> void</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">class</span> Calculator <span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation important">&lt;&lt;abstract&gt;&gt;</span></span>
<span class="line">        +calculate<span class="token text string">(int, int, String)</span> int</span>
<span class="line">        +calculate<span class="token text string">(double, double, String)</span> double</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">class</span> ArrayCalculator <span class="token punctuation">{</span></span>
<span class="line">        -String[] historyArr</span>
<span class="line">        -int head</span>
<span class="line">        -boolean flag</span>
<span class="line">        +ArrayCalculator<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        +ArrayCalculator<span class="token text string">(int size)</span></span>
<span class="line">        +calculate<span class="token text string">(double, double, String)</span> double</span>
<span class="line">        +calculate<span class="token text string">(int, int, String)</span> int</span>
<span class="line">        +showHistory<span class="token punctuation">(</span><span class="token punctuation">)</span> void</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">class</span> ListCalculator <span class="token punctuation">{</span></span>
<span class="line">        -List~String~ historyList</span>
<span class="line">        -boolean flag</span>
<span class="line">        +ListCalculator<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        +calculate<span class="token text string">(double, double, String)</span> double</span>
<span class="line">        +calculate<span class="token text string">(int, int, String)</span> int</span>
<span class="line">        +showHistory<span class="token punctuation">(</span><span class="token punctuation">)</span> void</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">class</span> MapCalculator <span class="token punctuation">{</span></span>
<span class="line">        -Map~String,String~ historyMap</span>
<span class="line">        -boolean flag</span>
<span class="line">        +MapCalculator<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        +calculate<span class="token text string">(double, double, String)</span> double</span>
<span class="line">        +calculate<span class="token text string">(int, int, String)</span> int</span>
<span class="line">        +showHistory<span class="token punctuation">(</span><span class="token punctuation">)</span> void</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    ICalculator <span class="token arrow operator">&lt;|--</span> Calculator</span>
<span class="line">    Calculator <span class="token arrow operator">&lt;|--</span> ArrayCalculator</span>
<span class="line">    Calculator <span class="token arrow operator">&lt;|--</span> ListCalculator</span>
<span class="line">    Calculator <span class="token arrow operator">&lt;|--</span> MapCalculator</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="실행-흐름도" tabindex="-1"><a class="header-anchor" href="#실행-흐름도"><span>실행 흐름도</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">flowchart</span> TD</span>
<span class="line">    A<span class="token text string">[프로그램 시작]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[사용자 입력 받기]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> C<span class="token text string">{입력 형식 검증}</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span><span class="token label property">|올바름|</span> D<span class="token text string">[숫자와 연산자 추출]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span><span class="token label property">|잘못됨|</span> E<span class="token text string">[에러 메시지 출력]</span></span>
<span class="line">    E <span class="token arrow operator">--&gt;</span> B</span>
<span class="line">    </span>
<span class="line">    D <span class="token arrow operator">--&gt;</span> F<span class="token text string">{실수 포함?}</span></span>
<span class="line">    F <span class="token arrow operator">--&gt;</span><span class="token label property">|예|</span> G<span class="token text string">[double 계산 실행]</span></span>
<span class="line">    F <span class="token arrow operator">--&gt;</span><span class="token label property">|아니오|</span> H<span class="token text string">[int 계산 실행]</span></span>
<span class="line">    </span>
<span class="line">    G <span class="token arrow operator">--&gt;</span> I<span class="token text string">[계산 결과 저장]</span></span>
<span class="line">    H <span class="token arrow operator">--&gt;</span> I</span>
<span class="line">    I <span class="token arrow operator">--&gt;</span> J<span class="token text string">[결과 출력]</span></span>
<span class="line">    J <span class="token arrow operator">--&gt;</span> K<span class="token text string">[이력 표시]</span></span>
<span class="line">    K <span class="token arrow operator">--&gt;</span> L<span class="token text string">[프로그램 종료]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">style</span> A <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#e1f5fe</span></span>
<span class="line">    <span class="token keyword">style</span> L <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#f3e5f5</span></span>
<span class="line">    <span class="token keyword">style</span> E <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#ffebee</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="핵심-java-개념-설명" tabindex="-1"><a class="header-anchor" href="#핵심-java-개념-설명"><span>핵심 Java 개념 설명</span></a></h2><h3 id="_1-인터페이스-interface" tabindex="-1"><a class="header-anchor" href="#_1-인터페이스-interface"><span>1. 인터페이스 (Interface)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 인터페이스: 클래스가 구현해야 할 메서드들의 명세서</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICalculator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 정수 계산을 위한 메서드 (구현부 없음, 추상 메서드)</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 실수 계산을 위한 메서드 (메서드 오버로딩 - 같은 이름, 다른 매개변수)</span></span>
<span class="line">    <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 계산 이력을 보여주는 메서드</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">showHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>인터페이스의 특징:</strong></p><ul><li><code>abstract</code> 키워드 없이도 모든 메서드가 추상 메서드</li><li>클래스는 인터페이스를 <code>implements</code>로 구현</li><li>다중 구현 가능 (한 클래스가 여러 인터페이스 구현 가능)</li></ul><h3 id="_2-추상클래스-abstract-class" tabindex="-1"><a class="header-anchor" href="#_2-추상클래스-abstract-class"><span>2. 추상클래스 (Abstract Class)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 추상클래스: 일부 구현을 제공하지만 인스턴스 생성 불가</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">implements</span> <span class="token class-name">ICalculator</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  <span class="token comment">// 부모(인터페이스)의 메서드를 재정의한다는 표시</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 캐스팅: int를 double로 변환 후 계산, 결과를 다시 int로 변환</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> num1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// switch문: 연산자에 따라 다른 계산 수행</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operator<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;+&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>  <span class="token comment">// return하면 break 불필요</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;-&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;*&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;/&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// 지원하지 않는 연산자일 때 예외 발생</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;지원하지 않는 연산자입니다!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// showHistory()는 각 자식 클래스에서 구현해야 함 (추상 메서드)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>추상클래스 vs 인터페이스:</strong></p><ul><li>추상클래스: 일부 구현 제공 가능, 단일 상속</li><li>인터페이스: 구현 없음(명세만), 다중 구현 가능</li></ul><h3 id="_3-메서드-오버로딩-method-overloading" tabindex="-1"><a class="header-anchor" href="#_3-메서드-오버로딩-method-overloading"><span>3. 메서드 오버로딩 (Method Overloading)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 같은 메서드 이름, 다른 매개변수 타입</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span>     <span class="token comment">// 정수용</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span>  <span class="token comment">// 실수용</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>오버로딩 조건:</strong></p><ul><li>메서드 이름 동일</li><li>매개변수 타입, 개수, 순서 중 하나라도 달라야 함</li><li>반환 타입만 다른 것은 오버로딩 불가</li></ul><hr><h2 id="계산기-구현-코드" tabindex="-1"><a class="header-anchor" href="#계산기-구현-코드"><span>계산기 구현 코드</span></a></h2><h3 id="_1-메인-애플리케이션" tabindex="-1"><a class="header-anchor" href="#_1-메인-애플리케이션"><span>1. 메인 애플리케이션</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">calculator<span class="token punctuation">.</span></span><span class="token class-name">ArrayCalculator</span></span><span class="token punctuation">;</span>  <span class="token comment">// 패키지에서 클래스 가져오기</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>           <span class="token comment">// 사용자 입력을 위한 클래스</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// main 메서드: 프로그램의 진입점 (시작점)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// public: 어디서든 접근 가능</span></span>
<span class="line">        <span class="token comment">// static: 객체 생성 없이 호출 가능 (메모리에 미리 로딩)</span></span>
<span class="line">        <span class="token comment">// void: 반환값 없음 (결과를 돌려주지 않음)</span></span>
<span class="line">        <span class="token comment">// String[] args: 명령행 인수를 받는 배열</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;계산기가 실행되었습니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 다형성: Calculator 타입으로 ArrayCalculator 객체 참조</span></span>
<span class="line">        <span class="token comment">// 업캐스팅: 자식 클래스 → 부모 클래스 타입으로 변환</span></span>
<span class="line">        <span class="token class-name">Calculator</span> cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Scanner: 키보드 입력을 받기 위한 객체</span></span>
<span class="line">        <span class="token comment">// System.in: 표준 입력(키보드)을 의미</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;계산할 식을 입력해주세요 ex) 1 + 1 : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> input <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 한 줄 전체 입력받기</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment">// 예외가 발생할 수 있는 코드 블록</span></span>
<span class="line">            <span class="token comment">// split(&quot; &quot;): 공백으로 문자열을 나누어 배열로 변환</span></span>
<span class="line">            <span class="token comment">// &quot;1 + 1&quot; → [&quot;1&quot;, &quot;+&quot;, &quot;1&quot;]</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArr <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputArr<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 배열 길이가 3이 아니면</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;잘못된 입력&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 예외 발생시키기</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 배열 인덱싱: 0부터 시작</span></span>
<span class="line">            <span class="token class-name">String</span> numStr1 <span class="token operator">=</span> inputArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 첫 번째 숫자 문자열</span></span>
<span class="line">            <span class="token class-name">String</span> numStr2 <span class="token operator">=</span> inputArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 두 번째 숫자 문자열  </span></span>
<span class="line">            <span class="token class-name">String</span> operator <span class="token operator">=</span> inputArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 연산자</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// contains(&quot;.&quot;): 문자열에 소수점이 포함되어 있는지 확인</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>numStr1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> numStr2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 둘 중 하나라도 실수면 double로 계산</span></span>
<span class="line">                </span>
<span class="line">                <span class="token comment">// parseDouble: 문자열을 double로 변환</span></span>
<span class="line">                <span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>numStr1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>numStr2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                </span>
<span class="line">                <span class="token keyword">double</span> result <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 둘 다 정수면 int로 계산</span></span>
<span class="line">                </span>
<span class="line">                <span class="token comment">// parseInt: 문자열을 int로 변환</span></span>
<span class="line">                <span class="token comment">// Integer는 int의 Wrapper 클래스 (객체 버전)</span></span>
<span class="line">                <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>numStr1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>numStr2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                </span>
<span class="line">                <span class="token keyword">int</span> result <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 예외가 발생했을 때 실행되는 블록</span></span>
<span class="line">            <span class="token comment">// System.err: 표준 에러 출력 (빨간색으로 표시됨)</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 에러 메시지만 출력</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-배열-기반-계산기" tabindex="-1"><a class="header-anchor" href="#_2-배열-기반-계산기"><span>2. 배열 기반 계산기</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">calculator</span><span class="token punctuation">;</span>  <span class="token comment">// 이 클래스가 속한 패키지 선언</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// final: 한 번 초기화되면 변경할 수 없는 상수</span></span>
<span class="line">    <span class="token comment">// private: 이 클래스 내부에서만 접근 가능</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> historyArr<span class="token punctuation">;</span>  <span class="token comment">// 계산 이력을 저장할 배열</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">// 현재 저장 위치를 가리키는 포인터</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment">// 중복 저장 방지용 플래그</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 기본 생성자: 매개변수 없이 객체 생성</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ArrayCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>historyArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 크기 20인 배열 생성</span></span>
<span class="line">        <span class="token comment">// 배열 초기값은 모두 null</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 매개변수가 있는 생성자: 배열 크기를 사용자가 지정</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ArrayCalculator</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>historyArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 사용자 지정 크기로 배열 생성</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  <span class="token comment">// 부모 클래스의 메서드를 재정의</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ArrayCalculator Double&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 디버깅용 출력</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// super: 부모 클래스를 가리키는 키워드</span></span>
<span class="line">        <span class="token comment">// 부모의 calculate 메서드 호출하여 실제 계산 수행</span></span>
<span class="line">        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// flag가 false일 때만 저장 (중복 방지)</span></span>
<span class="line">            <span class="token comment">// 배열 인덱스 초과 체크</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>historyArr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;이력 배열 길이보다 지금까지의 히스토리가 깁니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// formatted(): 문자열 템플릿에 값을 삽입</span></span>
<span class="line">            <span class="token comment">// %f: 실수 표시자, %s: 문자열 표시자</span></span>
<span class="line">            historyArr<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;%f %s %f = %f&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// head++: 현재 head 값 사용 후 1 증가 (후위 증감 연산자)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ArrayCalculator INT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 플래그 켜기 (double 메서드 호출 시 중복 저장 방지)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// int 계산은 내부적으로 double 계산을 호출</span></span>
<span class="line">        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>historyArr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;이력 배열 길이보다 지금까지의 히스토리가 깁니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// %d: 정수 표시자</span></span>
<span class="line">        historyArr<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;%d %s %d = %d&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 플래그 끄기</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[🥹 지금까지의 계산 결과]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 향상된 for문 (for-each): 배열의 모든 요소를 순회</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> historyArr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// null이면 더 이상 저장된 데이터가 없음</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 메서드 종료 (break와 동일한 효과)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-리스트-기반-계산기" tabindex="-1"><a class="header-anchor" href="#_3-리스트-기반-계산기"><span>3. 리스트 기반 계산기</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">calculator</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>  <span class="token comment">// 동적 배열 클래스</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>       <span class="token comment">// 리스트 인터페이스</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// List: 인터페이스, ArrayList: 구현 클래스</span></span>
<span class="line">    <span class="token comment">// 제네릭 &lt;String&gt;: 이 리스트는 String 타입만 저장 가능</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> historyList<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ListCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 다이아몬드 연산자 &lt;&gt; : 타입 추론 (컴파일러가 자동으로 String 인식)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>historyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 크기 제한 없는 동적 배열</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ListCalculator Double&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> history <span class="token operator">=</span> <span class="token string">&quot;%f %s %f = %f&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// add(): 리스트 끝에 요소 추가 (크기 자동 증가)</span></span>
<span class="line">            historyList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ListCalculator INT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        historyList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s %d = %d&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[🥹 지금까지의 계산 결과]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 리스트는 null 체크 없이 순회 가능 (실제 데이터만 저장됨)</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> historyList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 전통적인 for문으로도 가능:</span></span>
<span class="line">        <span class="token comment">// for (int i = 0; i &lt; historyList.size(); i++) {</span></span>
<span class="line">        <span class="token comment">//     System.out.println(historyList.get(i));  // get(): 인덱스로 요소 조회</span></span>
<span class="line">        <span class="token comment">// }</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-맵-기반-계산기-캐시-기능-포함" tabindex="-1"><a class="header-anchor" href="#_4-맵-기반-계산기-캐시-기능-포함"><span>4. 맵 기반 계산기 (캐시 기능 포함)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">calculator</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>  <span class="token comment">// 해시 맵 구현체</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>      <span class="token comment">// 맵 인터페이스</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Map&lt;Key타입, Value타입&gt;: 키-값 쌍으로 데이터 저장</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> historyMap<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MapCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>historyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 해시 테이블 기반 맵</span></span>
<span class="line">        <span class="token comment">// TreeMap도 사용 가능 (정렬된 순서로 저장)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 계산식을 키로 사용 (캐시 검색용)</span></span>
<span class="line">        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;%f %s %f&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// containsKey(): 맵에 해당 키가 있는지 확인</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>historyMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;이미 계산한 결과가 있습니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// get(): 키에 해당하는 값 반환</span></span>
<span class="line">            <span class="token comment">// parseDouble(): 문자열을 double로 변환</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>historyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;%f&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// put(): 키-값 쌍 저장</span></span>
<span class="line">            historyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;%d %s %d&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>historyMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;이미 계산한 결과가 있습니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>historyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        historyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[🥹 지금까지의 계산 결과]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// entrySet(): 맵의 모든 키-값 쌍을 Set으로 반환</span></span>
<span class="line">        <span class="token comment">// Map.Entry: 키-값 쌍을 나타내는 내부 인터페이스</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> historyMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// getKey(): 키 반환, getValue(): 값 반환</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ai-이미지-생성기" tabindex="-1"><a class="header-anchor" href="#ai-이미지-생성기"><span>AI 이미지 생성기</span></a></h2><h3 id="시스템-구조도" tabindex="-1"><a class="header-anchor" href="#시스템-구조도"><span>시스템 구조도</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">sequenceDiagram</span></span>
<span class="line">    <span class="token keyword">participant</span> User as 사용자</span>
<span class="line">    <span class="token keyword">participant</span> App as ImageGen 앱</span>
<span class="line">    <span class="token keyword">participant</span> Gemini as Gemini API</span>
<span class="line">    <span class="token keyword">participant</span> File as 파일시스템</span>
<span class="line">    </span>
<span class="line">    User<span class="token arrow operator">-&gt;&gt;</span>App<span class="token operator">:</span> 좋아하는 동물 입력</span>
<span class="line">    App<span class="token arrow operator">-&gt;&gt;</span>App<span class="token operator">:</span> 입력 검증 및 저장</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">loop</span> 각 동물에 대해</span>
<span class="line">        App<span class="token arrow operator">-&gt;&gt;</span>Gemini<span class="token operator">:</span> 프롬프트 생성 요청</span>
<span class="line">        Gemini<span class="token arrow operator">-&gt;&gt;</span>App<span class="token operator">:</span> 이미지 프롬프트 반환</span>
<span class="line">        App<span class="token arrow operator">-&gt;&gt;</span>Gemini<span class="token operator">:</span> 이미지 생성 요청</span>
<span class="line">        Gemini<span class="token arrow operator">-&gt;&gt;</span>App<span class="token operator">:</span> Base64 이미지 반환</span>
<span class="line">        App<span class="token arrow operator">-&gt;&gt;</span>File<span class="token operator">:</span> PNG 파일로 저장</span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    </span>
<span class="line">    App<span class="token arrow operator">-&gt;&gt;</span>User<span class="token operator">:</span> 생성 완료 알림</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-기본-이미지-생성기-클래스" tabindex="-1"><a class="header-anchor" href="#_1-기본-이미지-생성기-클래스"><span>1. 기본 이미지 생성기 클래스</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">step2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URI</span></span><span class="token punctuation">;</span>                    <span class="token comment">// 웹 주소를 다루는 클래스</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpClient</span></span><span class="token punctuation">;</span>        <span class="token comment">// HTTP 통신을 위한 클라이언트</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpRequest</span></span><span class="token punctuation">;</span>       <span class="token comment">// HTTP 요청을 만드는 클래스</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpResponse</span></span><span class="token punctuation">;</span>      <span class="token comment">// HTTP 응답을 받는 클래스</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>             <span class="token comment">// 동적 배열</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>                  <span class="token comment">// 리스트 인터페이스</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>               <span class="token comment">// 사용자 입력</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>                <span class="token comment">// Base64 인코딩/디코딩</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>             <span class="token comment">// 파일 조작 유틸리티</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span>              <span class="token comment">// 파일 경로 클래스</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>             <span class="token comment">// 파일 경로 생성 유틸리티</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageGen</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// final 필드: 객체 생성 후 변경 불가</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> favoriteList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 좋아하는 동물 리스트</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 입력 스캐너</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>                                        <span class="token comment">// 입력받을 동물 개수</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HTTP 클라이언트</span></span>
<span class="line">    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token constant">GEMINI_API_KEY</span> <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;GEMINI_API_KEY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 환경변수에서 API 키 가져오기</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> imagePromptList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 생성된 이미지 프롬프트 리스트</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 생성자: 입력받을 동물 개수 설정</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ImageGen</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 메인 메서드: 프로그램 실행 순서</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ImageGen</span> gen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageGen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2개 동물 입력받을 객체 생성</span></span>
<span class="line">        gen<span class="token punctuation">.</span><span class="token function">inputData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 데이터 입력</span></span>
<span class="line">        gen<span class="token punctuation">.</span><span class="token function">makeImagePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 이미지 프롬프트 생성</span></span>
<span class="line">        gen<span class="token punctuation">.</span><span class="token function">generateImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 이미지 생성</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 사용자로부터 좋아하는 동물 입력받기</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">inputData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;좋아하는 동물을 입력해주세요 : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// trim(): 문자열 앞뒤 공백/줄바꿈 제거</span></span>
<span class="line">            <span class="token comment">// isEmpty(): 빈 문자열인지 확인</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;제대로 입력해주세요!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// 카운터 감소 (다시 입력받기)</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment">// 반복문 처음으로 돌아가기</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            favoriteList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 리스트에 추가</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>favoriteList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 입력된 리스트 출력</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// HTTP API 호출을 위한 공통 메서드</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">callAPI</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 환경변수 확인</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">GEMINI_API_KEY</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;GEMINI_API_KEY가 없습니다!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// HTTP 요청 빌더 패턴으로 생성</span></span>
<span class="line">        <span class="token class-name">HttpRequest</span> httpRequest <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">// 요청 URL 설정</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 헤더 설정</span></span>
<span class="line">                        <span class="token string">&quot;X-goog-api-key&quot;</span><span class="token punctuation">,</span> <span class="token constant">GEMINI_API_KEY</span><span class="token punctuation">)</span>     <span class="token comment">// API 키 헤더</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span>                                   <span class="token comment">// POST 방식으로 요청</span></span>
<span class="line">                    <span class="token class-name">HttpRequest<span class="token punctuation">.</span>BodyPublishers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>  <span class="token comment">// 요청 본문 설정</span></span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 요청 객체 완성</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// HTTP 요청 전송 및 응답 받기</span></span>
<span class="line">            <span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> httpResponse <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">                httpRequest<span class="token punctuation">,</span>                                    <span class="token comment">// 요청 객체</span></span>
<span class="line">                <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 응답을 String으로 받기</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> httpResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 응답 본문 반환</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 에러 메시지 출력</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 런타임 예외로 변환</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// AI를 이용해 이미지 생성 프롬프트 만들기</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">makeImagePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Gemini API 엔드포인트</span></span>
<span class="line">        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 입력받은 각 동물에 대해 프롬프트 생성</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> animal <span class="token operator">:</span> favoriteList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// JSON 형태의 요청 본문 (텍스트 블록 사용)</span></span>
<span class="line">            <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token function">callAPI</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">                {</span>
<span class="line">                    &quot;contents&quot;: [</span>
<span class="line">                      {</span>
<span class="line">                        &quot;parts&quot;: [</span>
<span class="line">                          {</span>
<span class="line">                            &quot;text&quot;: &quot;%s(을)를 이미지로 나타내기 위한 200자 이내의 상세한 프롬프트를 작성해줘. 결과만 작성해줘.&quot;</span>
<span class="line">                          }</span>
<span class="line">                        ]</span>
<span class="line">                      }</span>
<span class="line">                    ]</span>
<span class="line">                  }</span>
<span class="line">                &quot;&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// %s에 동물 이름 삽입</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// JSON 응답에서 텍스트 부분만 추출</span></span>
<span class="line">            <span class="token class-name">String</span> prompt <span class="token operator">=</span> result</span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;text\\&quot;: \\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// &quot;text&quot;: &quot; 뒤의 내용</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>              <span class="token comment">// 첫 번째 } 앞까지</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>         <span class="token comment">// 줄바꿈 문자 제거</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>          <span class="token comment">// 따옴표 제거</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 앞뒤 공백 제거</span></span>
<span class="line">            </span>
<span class="line">            imagePromptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 프롬프트 리스트에 추가</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 생성된 프롬프트들 출력</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> imagePromptList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 실제 이미지 생성하기</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">generateImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 이미지 생성 전용 모델</span></span>
<span class="line">        <span class="token class-name">String</span> model <span class="token operator">=</span> <span class="token string">&quot;gemini-2.0-flash-preview-image-generation&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent&quot;</span></span>
<span class="line">                     <span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 각 프롬프트에 대해 이미지 생성</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> prompt <span class="token operator">:</span> imagePromptList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token function">callAPI</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">                {</span>
<span class="line">                    &quot;contents&quot;: [</span>
<span class="line">                      {</span>
<span class="line">                        &quot;role&quot;: &quot;user&quot;,</span>
<span class="line">                        &quot;parts&quot;: [</span>
<span class="line">                          {</span>
<span class="line">                            &quot;text&quot;: &quot;%s&quot;</span>
<span class="line">                          }</span>
<span class="line">                        ]</span>
<span class="line">                      }</span>
<span class="line">                    ],</span>
<span class="line">                    &quot;generationConfig&quot;: {</span>
<span class="line">                      &quot;responseModalities&quot;: [&quot;IMAGE&quot;, &quot;TEXT&quot;]</span>
<span class="line">                    }</span>
<span class="line">                }</span>
<span class="line">                &quot;&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// JSON 응답에서 Base64 이미지 데이터 추출</span></span>
<span class="line">            <span class="token class-name">String</span> image64 <span class="token operator">=</span> result</span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;data\\&quot;: \\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment">// Base64 데이터 시작점 찾기</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>               <span class="token comment">// 첫 번째 } 앞까지</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>          <span class="token comment">// 줄바꿈 문자 제거</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>           <span class="token comment">// 따옴표 제거</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 앞뒤 공백 제거</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// Base64 디코딩하여 바이트 배열로 변환</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imageBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>image64<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 현재 시간을 파일명으로 사용 (중복 방지)</span></span>
<span class="line">            <span class="token class-name">String</span> outputPath <span class="token operator">=</span> <span class="token string">&quot;%s.png&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Path</span> filePath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 파일 경로 객체 생성</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 바이트 배열을 PNG 파일로 저장</span></span>
<span class="line">                <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> imageBytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;이미지가 저장되었습니다: &quot;</span> <span class="token operator">+</span> outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;파일 저장 실패: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="stream-api-활용" tabindex="-1"><a class="header-anchor" href="#stream-api-활용"><span>Stream API 활용</span></a></h2><h3 id="stream-api-개념" tabindex="-1"><a class="header-anchor" href="#stream-api-개념"><span>Stream API 개념</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">flowchart</span> LR</span>
<span class="line">    A<span class="token text string">[원본 데이터]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[Stream 생성]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> C<span class="token text string">[중간 연산들]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> D<span class="token text string">[최종 연산]</span></span>
<span class="line">    D <span class="token arrow operator">--&gt;</span> E<span class="token text string">[결과]</span></span>
<span class="line">    </span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C1<span class="token text string">[map: 변환]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C2<span class="token text string">[filter: 필터링]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C3<span class="token text string">[reduce: 집계]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">style</span> A <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#e3f2fd</span></span>
<span class="line">    <span class="token keyword">style</span> E <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#f3e5f5</span></span>
<span class="line">    <span class="token keyword">style</span> C <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#fff3e0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-기본-list-조작" tabindex="-1"><a class="header-anchor" href="#_1-기본-list-조작"><span>1. 기본 List 조작</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">step1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  <span class="token comment">// java.util 패키지의 모든 클래스 가져오기 (*)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution01</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// List&lt;타입&gt;: 제네릭을 사용한 타입 안전성 보장</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// ArrayList의 특징:</span></span>
<span class="line">        <span class="token comment">// - Array처럼 내부에 순서가 있고, 인덱스가 부여됨</span></span>
<span class="line">        <span class="token comment">// - 타입이 모두 동일하고, 길이 제한이 명시적으로 없어 자동으로 늘어남</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 무한 루프</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;입력해주세요 : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 한 줄 입력받기</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;종료&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 문자열 비교는 equals() 사용</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 루프 탈출</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 리스트 끝에 요소 추가</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;입력된 데이터: &quot;</span> <span class="token operator">+</span> stringList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-랜덤-데이터-생성-및-변환" tabindex="-1"><a class="header-anchor" href="#_2-랜덤-데이터-생성-및-변환"><span>2. 랜덤 데이터 생성 및 변환</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">step1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution02</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numberList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Random 클래스: 난수 생성을 위한 클래스</span></span>
<span class="line">        <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 10~20개 사이의 랜덤한 개수만큼 반복</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// nextInt(11): 0~10 사이 숫자 + 10 = 10~20</span></span>
<span class="line">            <span class="token comment">// nextInt(101): 0~100 사이 랜덤 숫자</span></span>
<span class="line">            numberList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;원본 리스트: &quot;</span> <span class="token operator">+</span> numberList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 방법 1: 기존 방식 - 원본을 직접 수정 (Side Effect 발생)</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numberList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// set(index, value): 해당 인덱스의 값을 변경</span></span>
<span class="line">            <span class="token comment">// get(index): 해당 인덱스의 값을 가져오기</span></span>
<span class="line">            numberList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> numberList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;10배 후 (원본 수정): &quot;</span> <span class="token operator">+</span> numberList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 방법 2: 새로운 리스트 생성 - 원본 보존</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numberList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> numberList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 향상된 for문 (for-each)</span></span>
<span class="line">            <span class="token comment">// v는 int이지만 ArrayList&lt;Integer&gt;에 자동으로 Boxing됨</span></span>
<span class="line">            <span class="token comment">// Boxing: 기본 타입 → Wrapper 클래스로 자동 변환</span></span>
<span class="line">            <span class="token comment">// Unboxing: Wrapper 클래스 → 기본 타입으로 자동 변환</span></span>
<span class="line">            numberList2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;새 리스트 (원본 보존): &quot;</span> <span class="token operator">+</span> numberList2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;원본 확인: &quot;</span> <span class="token operator">+</span> numberList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 방법 3: Stream API - 함수형 프로그래밍 방식</span></span>
<span class="line">        <span class="token comment">// 사상: mapping (데이터를 하나하나 변환처리)</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numberList3 <span class="token operator">=</span> numberList</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">// 스트림 생성</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Solution02</span><span class="token operator">::</span><span class="token function">multiplyTen</span><span class="token punctuation">)</span>       <span class="token comment">// 각 요소에 함수 적용</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// 결과를 새 리스트로 변환</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 메서드 레퍼런스 (::): x -&gt; multiplyTen(x)와 동일한 의미</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Stream API 결과: &quot;</span> <span class="token operator">+</span> numberList3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// static 메서드: 객체 생성 없이 클래스명으로 직접 호출 가능</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">multiplyTen</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-stream의-reduce-연산" tabindex="-1"><a class="header-anchor" href="#_3-stream의-reduce-연산"><span>3. Stream의 reduce 연산</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">step1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution06</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// List.of(): 불변 리스트 생성 (수정 불가)</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// reduce: 여러 개의 값을 하나의 값으로 압축</span></span>
<span class="line">        <span class="token comment">// map: 모든 요소를 변환 (a -&gt; a&#39;, b -&gt; b&#39;...)</span></span>
<span class="line">        <span class="token comment">// reduce: 누적 계산 (cur: 현재값, acc: 누적값)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 전통적인 방식으로 합계 계산</span></span>
<span class="line">        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 누적 합계</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;전통적 방식 합계: &quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Stream reduce로 합계 계산</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Stream reduce 합계: &quot;</span> <span class="token operator">+</span> </span>
<span class="line">            numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token number">0</span><span class="token punctuation">,</span>                    <span class="token comment">// 초기값</span></span>
<span class="line">                <span class="token punctuation">(</span>cur<span class="token punctuation">,</span> acc<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> cur <span class="token operator">+</span> acc  <span class="token comment">// 람다식: 현재값과 누적값을 더함</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// reduce로 곱셈 계산</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Stream reduce 곱셈: &quot;</span> <span class="token operator">+</span> </span>
<span class="line">            numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token comment">// 곱셈의 초기값은 1</span></span>
<span class="line">                <span class="token punctuation">(</span>cur<span class="token punctuation">,</span> acc<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> cur <span class="token operator">*</span> acc  <span class="token comment">// 현재값과 누적값을 곱함</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 람다식 설명:</span></span>
<span class="line">        <span class="token comment">// (cur, acc) -&gt; cur + acc</span></span>
<span class="line">        <span class="token comment">// 매개변수    반환값</span></span>
<span class="line">        <span class="token comment">// cur: 스트림의 각 요소</span></span>
<span class="line">        <span class="token comment">// acc: 지금까지 계산된 누적값</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-완전한-함수형-프로그래밍-이미지-생성기" tabindex="-1"><a class="header-anchor" href="#_4-완전한-함수형-프로그래밍-이미지-생성기"><span>4. 완전한 함수형 프로그래밍 이미지 생성기</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">step2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URI</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpClient</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpRequest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpResponse</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>  <span class="token comment">// 정수 스트림</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageGenStreamClean</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 입력받을 개수</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// HTTP 클라이언트와 템플릿들</span></span>
<span class="line">        <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> urlTemplate <span class="token operator">=</span> <span class="token string">&quot;https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 프롬프트 생성용 JSON 템플릿</span></span>
<span class="line">        <span class="token class-name">String</span> promptTemplate <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        {</span>
<span class="line">            &quot;contents&quot;: [</span>
<span class="line">              {</span>
<span class="line">                &quot;parts&quot;: [</span>
<span class="line">                  {</span>
<span class="line">                    &quot;text&quot;: &quot;%s(을)를 이미지로 나타내기 위한 200자 이내의 상세한 프롬프트를 작성해줘. 결과만 작성해줘.&quot;</span>
<span class="line">                  }</span>
<span class="line">                ]</span>
<span class="line">              }</span>
<span class="line">            ]</span>
<span class="line">          }</span>
<span class="line">        &quot;&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 이미지 생성용 JSON 템플릿</span></span>
<span class="line">        <span class="token class-name">String</span> imageTemplate <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        {</span>
<span class="line">            &quot;contents&quot;: [</span>
<span class="line">              {</span>
<span class="line">                &quot;role&quot;: &quot;user&quot;,</span>
<span class="line">                &quot;parts&quot;: [</span>
<span class="line">                  {</span>
<span class="line">                    &quot;text&quot;: &quot;%s&quot;</span>
<span class="line">                  }</span>
<span class="line">                ]</span>
<span class="line">              }</span>
<span class="line">            ],</span>
<span class="line">            &quot;generationConfig&quot;: {</span>
<span class="line">              &quot;responseModalities&quot;: [&quot;IMAGE&quot;, &quot;TEXT&quot;]</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">        &quot;&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Stream API를 이용한 함수형 프로그래밍 체인</span></span>
<span class="line">        <span class="token class-name">IntStream</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>  <span class="token comment">// 0부터 size-1까지의 정수 스트림 생성</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// int → Integer로 Boxing (객체 스트림으로 변환)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 각 인덱스를 사용자 입력으로 변환</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;좋아하는 캐릭터는? : &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 각 입력을 프롬프트로 변환</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">                        <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>urlTemplate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token string">&quot;gemini-2.0-flash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                   <span class="token string">&quot;X-goog-api-key&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;GEMINI_API_KEY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest<span class="token punctuation">.</span>BodyPublishers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span></span>
<span class="line">                                promptTemplate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// null 값 제거 (에러 발생한 경우 제외)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;text\\&quot;: \\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// JSON에서 텍스트 추출</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 프롬프트를 이미지로 변환</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span></span>
<span class="line">                        <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>urlTemplate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token string">&quot;gemini-2.0-flash-preview-image-generation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                                   <span class="token string">&quot;X-goog-api-key&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;GEMINI_API_KEY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest<span class="token punctuation">.</span>BodyPublishers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span></span>
<span class="line">                                imageTemplate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// null 값 제거</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;data\\&quot;: \\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// Base64 이미지 데이터 추출</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                      <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ImageGenStreamClean</span><span class="token operator">::</span><span class="token function">handleImage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 각 이미지 저장</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;모든 이미지 생성이 완료되었습니다!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Base64 이미지 데이터를 파일로 저장하는 메서드</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleImage</span><span class="token punctuation">(</span><span class="token class-name">String</span> base64<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Base64 디코딩</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imageBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 현재 시간을 밀리초로 사용하여 고유한 파일명 생성</span></span>
<span class="line">            <span class="token class-name">String</span> outputPath <span class="token operator">=</span> <span class="token string">&quot;%s.png&quot;</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Path</span> filePath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 바이트 배열을 파일로 저장</span></span>
<span class="line">            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> imageBytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;이미지 저장 완료: &quot;</span> <span class="token operator">+</span> outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;이미지 저장 실패: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="자료구조-비교표" tabindex="-1"><a class="header-anchor" href="#자료구조-비교표"><span>자료구조 비교표</span></a></h2><table><thead><tr><th>특징</th><th>Array</th><th>ArrayList</th><th>HashMap</th></tr></thead><tbody><tr><td><strong>크기</strong></td><td>고정</td><td>동적</td><td>동적</td></tr><tr><td><strong>타입 안전성</strong></td><td>제네릭 불가</td><td>제네릭 가능</td><td>제네릭 가능</td></tr><tr><td><strong>접근 방식</strong></td><td>인덱스</td><td>인덱스</td><td>키-값</td></tr><tr><td><strong>검색 속도</strong></td><td>O(n)</td><td>O(n)</td><td>O(1) 평균</td></tr><tr><td><strong>메모리 사용량</strong></td><td>최소</td><td>중간</td><td>많음</td></tr><tr><td><strong>캐시 친화적</strong></td><td>높음</td><td>높음</td><td>낮음</td></tr></tbody></table><h2 id="stream-api-vs-전통적-방식" tabindex="-1"><a class="header-anchor" href="#stream-api-vs-전통적-방식"><span>Stream API vs 전통적 방식</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">graph</span> TD</span>
<span class="line">    A<span class="token text string">[데이터 처리 방식]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[전통적 방식]</span></span>
<span class="line">    A <span class="token arrow operator">--&gt;</span> C<span class="token text string">[Stream API]</span></span>
<span class="line">    </span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> B1<span class="token text string">[for/while 루프]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> B2<span class="token text string">[조건문 중첩]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> B3<span class="token text string">[임시 변수 많음]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> B4<span class="token text string">[Side Effect 위험]</span></span>
<span class="line">    </span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C1<span class="token text string">[함수형 체이닝]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C2<span class="token text string">[불변성 보장]</span>  </span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C3<span class="token text string">[가독성 향상]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C4<span class="token text string">[병렬 처리 지원]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">style</span> B <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#ffebee</span></span>
<span class="line">    <span class="token keyword">style</span> C <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#e8f5e8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="전통적-방식의-특징" tabindex="-1"><a class="header-anchor" href="#전통적-방식의-특징"><span>전통적 방식의 특징</span></a></h3><ul><li><strong>장점</strong>: 직관적이고 이해하기 쉬움, 디버깅 용이</li><li><strong>단점</strong>: 코드가 길어짐, Side Effect 발생 가능, 실수하기 쉬움</li></ul><h3 id="stream-api의-특징" tabindex="-1"><a class="header-anchor" href="#stream-api의-특징"><span>Stream API의 특징</span></a></h3><ul><li><strong>장점</strong>: 간결한 코드, 함수형 프로그래밍, 병렬 처리 가능</li><li><strong>단점</strong>: 학습 곡선, 디버깅 어려움, 단순한 작업에는 오버헤드</li></ul><hr><h2 id="프로그래밍-패러다임-비교" tabindex="-1"><a class="header-anchor" href="#프로그래밍-패러다임-비교"><span>프로그래밍 패러다임 비교</span></a></h2><h3 id="_1-명령형-프로그래밍-imperative" tabindex="-1"><a class="header-anchor" href="#_1-명령형-프로그래밍-imperative"><span>1. 명령형 프로그래밍 (Imperative)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// &quot;어떻게(How)&quot; 할지를 단계별로 명시</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> value <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-함수형-프로그래밍-functional" tabindex="-1"><a class="header-anchor" href="#_2-함수형-프로그래밍-functional"><span>2. 함수형 프로그래밍 (Functional)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// &quot;무엇을(What)&quot; 할지를 선언적으로 명시</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>      <span class="token comment">// 5보다 큰 값만</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment">// 각각 2배로</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 리스트로 변환</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="http-api-통신-흐름" tabindex="-1"><a class="header-anchor" href="#http-api-통신-흐름"><span>HTTP API 통신 흐름</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">sequenceDiagram</span></span>
<span class="line">    <span class="token keyword">participant</span> App as Java 앱</span>
<span class="line">    <span class="token keyword">participant</span> Client as HttpClient</span>
<span class="line">    <span class="token keyword">participant</span> API as Gemini API</span>
<span class="line">    </span>
<span class="line">    App<span class="token arrow operator">-&gt;&gt;</span>Client<span class="token operator">:</span> HttpRequest 생성</span>
<span class="line">    Client<span class="token arrow operator">-&gt;&gt;</span>API<span class="token operator">:</span> HTTP POST 요청</span>
<span class="line">    <span class="token keyword">Note over</span> API<span class="token operator">:</span> AI 모델 처리</span>
<span class="line">    API<span class="token arrow operator">-&gt;&gt;</span>Client<span class="token operator">:</span> JSON 응답</span>
<span class="line">    Client<span class="token arrow operator">-&gt;&gt;</span>App<span class="token operator">:</span> HttpResponse 반환</span>
<span class="line">    App<span class="token arrow operator">-&gt;&gt;</span>App<span class="token operator">:</span> JSON 파싱</span>
<span class="line">    App<span class="token arrow operator">-&gt;&gt;</span>App<span class="token operator">:</span> 결과 처리</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api-통신의-핵심-개념" tabindex="-1"><a class="header-anchor" href="#api-통신의-핵심-개념"><span>API 통신의 핵심 개념</span></a></h3><ol><li><p><strong>HTTP 메서드</strong></p><ul><li>GET: 데이터 조회</li><li>POST: 데이터 생성/전송</li><li>PUT: 데이터 수정</li><li>DELETE: 데이터 삭제</li></ul></li><li><p><strong>요청 구성 요소</strong></p><ul><li>URL: 요청 주소</li><li>Headers: 메타데이터 (Content-Type, 인증 등)</li><li>Body: 실제 전송 데이터</li></ul></li><li><p><strong>응답 처리</strong></p><ul><li>Status Code: 요청 처리 결과 (200=성공, 404=없음, 500=서버오류)</li><li>Response Body: 실제 데이터</li><li>Headers: 응답 메타데이터</li></ul></li></ol><hr><h2 id="예외-처리-exception-handling" tabindex="-1"><a class="header-anchor" href="#예외-처리-exception-handling"><span>예외 처리 (Exception Handling)</span></a></h2><h3 id="try-catch-finally-구조" tabindex="-1"><a class="header-anchor" href="#try-catch-finally-구조"><span>try-catch-finally 구조</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 예외가 발생할 수 있는 코드</span></span>
<span class="line">    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// ArithmeticException 발생</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 특정 예외 처리</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0으로 나눌 수 없습니다: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 모든 예외 처리 (상위 클래스)</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;예상치 못한 오류: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 예외 발생 여부와 관계없이 항상 실행</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;정리 작업 수행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="throws-vs-throw" tabindex="-1"><a class="header-anchor" href="#throws-vs-throw"><span>throws vs throw</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// throws: 메서드가 던질 수 있는 예외를 선언</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// IOException을 던질 수 있음을 선언</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// throw: 실제로 예외를 발생시킴</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;잘못된 인자입니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="메모리-관리와-가비지-컬렉션" tabindex="-1"><a class="header-anchor" href="#메모리-관리와-가비지-컬렉션"><span>메모리 관리와 가비지 컬렉션</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="prismjs" data-ext="mermaid"><pre><code class="language-mermaid"><span class="line"><span class="token keyword">graph</span> TD</span>
<span class="line">    A<span class="token text string">[Java 메모리 영역]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[Heap 영역]</span></span>
<span class="line">    A <span class="token arrow operator">--&gt;</span> C<span class="token text string">[Stack 영역]</span></span>
<span class="line">    A <span class="token arrow operator">--&gt;</span> D<span class="token text string">[Method 영역]</span></span>
<span class="line">    </span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> B1<span class="token text string">[Young Generation]</span></span>
<span class="line">    B <span class="token arrow operator">--&gt;</span> B2<span class="token text string">[Old Generation]</span></span>
<span class="line">    </span>
<span class="line">    B1 <span class="token arrow operator">--&gt;</span> B11<span class="token text string">[Eden]</span></span>
<span class="line">    B1 <span class="token arrow operator">--&gt;</span> B12<span class="token text string">[Survivor S0]</span></span>
<span class="line">    B1 <span class="token arrow operator">--&gt;</span> B13<span class="token text string">[Survivor S1]</span></span>
<span class="line">    </span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C1<span class="token text string">[지역변수]</span></span>
<span class="line">    C <span class="token arrow operator">--&gt;</span> C2<span class="token text string">[메서드 호출 정보]</span></span>
<span class="line">    </span>
<span class="line">    D <span class="token arrow operator">--&gt;</span> D1<span class="token text string">[클래스 정보]</span></span>
<span class="line">    D <span class="token arrow operator">--&gt;</span> D2<span class="token text string">[static 변수]</span></span>
<span class="line">    D <span class="token arrow operator">--&gt;</span> D3<span class="token text string">[상수]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">style</span> B <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#e3f2fd</span></span>
<span class="line">    <span class="token keyword">style</span> C <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#f3e5f5</span></span>
<span class="line">    <span class="token keyword">style</span> D <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#fff3e0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="가비지-컬렉션-과정" tabindex="-1"><a class="header-anchor" href="#가비지-컬렉션-과정"><span>가비지 컬렉션 과정</span></a></h3><ol><li><strong>Eden 영역</strong>에 새 객체 생성</li><li>Eden 가득 찰 때 <strong>Minor GC</strong> 발생</li><li>살아남은 객체는 <strong>Survivor</strong> 영역으로 이동</li><li>여러 번 살아남은 객체는 <strong>Old Generation</strong>으로 승격</li><li>Old 영역 가득 찰 때 <strong>Major GC</strong> 발생</li></ol><hr><h2 id="참고자료" tabindex="-1"><a class="header-anchor" href="#참고자료"><span>참고자료</span></a></h2><h3 id="📚-java-학습-리소스" tabindex="-1"><a class="header-anchor" href="#📚-java-학습-리소스"><span>📚 Java 학습 리소스</span></a></h3><ul><li><a href="https://www.programiz.com/java-programming" target="_blank" rel="noopener noreferrer">Programiz Java Tutorial</a></li><li><a href="https://www.geeksforgeeks.org/java/" target="_blank" rel="noopener noreferrer">GeeksforGeeks Java</a></li><li><a href="https://www.baeldung.com/get-started-with-java-series" target="_blank" rel="noopener noreferrer">Baeldung Java Series</a></li><li><a href="https://www.codecademy.com/catalog/language/java" target="_blank" rel="noopener noreferrer">Codecademy Java</a></li></ul><h3 id="🔧-개발-도구" tabindex="-1"><a class="header-anchor" href="#🔧-개발-도구"><span>🔧 개발 도구</span></a></h3><ul><li><a href="https://www.deepl.com/ko/translator" target="_blank" rel="noopener noreferrer">DeepL 번역기</a></li><li><a href="https://emojipedia.org/" target="_blank" rel="noopener noreferrer">Emojipedia</a></li><li><a href="https://aistudio.google.com/" target="_blank" rel="noopener noreferrer">Google AI Studio</a></li></ul><h3 id="🌐-api-문서" tabindex="-1"><a class="header-anchor" href="#🌐-api-문서"><span>🌐 API 문서</span></a></h3><ul><li><a href="https://github.com/googleapis/java-genai" target="_blank" rel="noopener noreferrer">Google Generative AI</a></li><li><a href="https://mvnrepository.com/artifact/com.google.genai/google-genai" target="_blank" rel="noopener noreferrer">Maven Repository</a></li></ul><h3 id="📁-프로젝트-저장소" tabindex="-1"><a class="header-anchor" href="#📁-프로젝트-저장소"><span>📁 프로젝트 저장소</span></a></h3><ul><li><a href="https://github.com/yjshin-cloud/250805_calculator" target="_blank" rel="noopener noreferrer">Calculator Project</a></li><li><a href="https://github.com/yjshin-cloud/250805_fp" target="_blank" rel="noopener noreferrer">Functional Programming Examples</a></li></ul><hr><h2 id="핵심-포인트-요약" tabindex="-1"><a class="header-anchor" href="#핵심-포인트-요약"><span>핵심 포인트 요약</span></a></h2><h3 id="🎯-객체지향-프로그래밍" tabindex="-1"><a class="header-anchor" href="#🎯-객체지향-프로그래밍"><span>🎯 객체지향 프로그래밍</span></a></h3><ul><li><strong>캡슐화</strong>: 데이터와 메서드를 하나로 묶기</li><li><strong>상속</strong>: 기존 클래스의 특성을 물려받기</li><li><strong>다형성</strong>: 같은 메서드 다른 구현</li><li><strong>추상화</strong>: 복잡한 내용 숨기고 핵심만 표현</li></ul><h3 id="🚀-함수형-프로그래밍" tabindex="-1"><a class="header-anchor" href="#🚀-함수형-프로그래밍"><span>🚀 함수형 프로그래밍</span></a></h3><ul><li><strong>불변성</strong>: 데이터 변경 대신 새로운 데이터 생성</li><li><strong>순수 함수</strong>: Side Effect 없는 함수</li><li><strong>고차 함수</strong>: 함수를 매개변수나 반환값으로 사용</li><li><strong>체이닝</strong>: 여러 연산을 연결하여 처리</li></ul><h3 id="💡-실무-팁" tabindex="-1"><a class="header-anchor" href="#💡-실무-팁"><span>💡 실무 팁</span></a></h3><ul><li>적절한 자료구조 선택이 성능에 큰 영향</li><li>예외 처리로 안정적인 프로그램 작성</li><li>API 통신 시 에러 처리 필수</li><li>함수형과 명령형을 상황에 맞게 선택</li></ul><hr><p><strong>🦁 멋쟁이사자처럼과 함께 Java 마스터가 되어보세요!</strong></p>`,106)])])}const i=s(e,[["render",l]]),u=JSON.parse('{"path":"/Edu/BootCamp/LikeLionCloudEngineering_4th/1_DailyStudy/Week_2/20250805.html","title":"Java Calculator & AI 이미지 생성기 완벽 가이드","lang":"ko-KR","frontmatter":{},"git":{"updatedTime":1756307520000,"contributors":[{"name":"yjshin-cloud","username":"yjshin-cloud","email":"yjshin.cloud@gmail.com","commits":2,"url":"https://github.com/yjshin-cloud"},{"name":"yjshin.cloud","username":"","email":"yjshin.cloud@gmail.com","commits":1}],"changelog":[{"hash":"a25b1690258363e622bea4ff5ccd8e22aaa7ddef","time":1756307520000,"email":"yjshin.cloud@gmail.com","author":"yjshin.cloud","message":"TEST4"},{"hash":"20c5211bf528758d6bf5bcd13fb9d0d946ba5a17","time":1756004762000,"email":"yjshin.cloud@gmail.com","author":"yjshin-cloud","message":"Update 20250805.md"},{"hash":"3f44a4bfc78ba877fcc1a0f8b2fbe01cbf5027a1","time":1756004629000,"email":"yjshin.cloud@gmail.com","author":"yjshin-cloud","message":"Create 20250805.md"}]},"filePathRelative":"Edu/BootCamp/LikeLionCloudEngineering_4th/1_DailyStudy/Week_2/20250805.md"}');export{i as comp,u as data};
